@page "/"
@using SkiaSharp;
@using SkiaSharp.Views.Blazor
@using ThumbHashes;

<PageTitle>ThumbHash Demo</PageTitle>

<div class="row">
    @if (thumbhash is not null)
    {
        <div class="col">
            <h4>ThumbHash info:</h4>
            <p>
                <pre>@thumbhashHex</pre>
                <pre>@thumbhash</pre>
            </p>
        </div>
    }

    <div class="col">
        <h4>Convert ThumbHash to Render:</h4>
        <InputText @bind-Value="thumbhashHex" style="font-family:monospace;width:30em" />
        <br />
        @if (renderedHash is not null and { } rendered)
        {
            var wr = 250f / rendered.width;
            var wh = 250f / rendered.height;
            var ar = Math.Min(wr, wh);
            var cw = rendered.width * ar;
            var ch = rendered.height * ar;
            <img src="@rendered.dataUri" width="@cw" height="@ch" />
        }
    </div>

    <div class="col">
        <h4>Convert Image to ThumbHash:</h4>
        <InputFile OnChange="@LoadFiles" />
    </div>
</div>

@code {
    public string thumbhashHex
    {
        get => Convert.ToHexString((thumbhash?.Hash ?? ReadOnlyMemory<byte>.Empty).Span);
        set => thumbhash = value switch
        {
            { Length: >= 5 } => new ThumbHash(Convert.FromHexString(value.Replace(" ", ""))),
            _ => null
        };
    }

    public ThumbHash? thumbhash;

    public (int width, int height, string dataUri)? renderedHash => RenderHash(thumbhash);

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var imageFile = await e.File.RequestImageFileAsync("image/png", 100, 100);
        using var imageStream = imageFile.OpenReadStream();

        using var ms = new MemoryStream();
        await imageStream.CopyToAsync(ms);
        ms.Seek(0, SeekOrigin.Begin);

        using var skImage = SKImage.FromEncodedData(ms);

        using var bitmap = SKBitmap.FromImage(skImage);
        using var bitmapRgba = bitmap.Copy(SKColorType.Rgba8888);

        thumbhash = ThumbHash.FromImage(bitmapRgba.Width, bitmapRgba.Height, bitmapRgba.GetPixelSpan());

        StateHasChanged();
    }

    private static (int width, int height, string dataUri)? RenderHash(ThumbHash? thumbhash)
    {
        if (thumbhash is not ThumbHash hash)
        {
            return null;
        }

        var (width, height, rgba) = hash.ToImage();

        var info = new SKImageInfo(width, height, SKColorType.Rgba8888, SKAlphaType.Unpremul);
        using var image = SKImage.FromPixelCopy(info, rgba);
        using var encoded = image.Encode();
        return (width, height, "data:image/png;base64," + Convert.ToBase64String(encoded.AsSpan()));
    }
}